{"version":3,"sources":["components/SearchForm.js","components/Img.js","components/NoImages.js","components/ImageList.js","App.js","serviceWorker.js","index.js"],"names":["SearchForm","props","submitSearch","e","preventDefault","onSearch","state","searchTerm","currentTarget","reset","handleChange","setState","target","value","onSubmit","this","type","placeholder","onChange","className","Component","Img","href","link","src","alt","user","name","NoImages","ImageList","images","results","data","length","filter","img","width","height","map","urls","small","links","html","key","id","App","performSearch","input","APP_ID","axios","get","then","imgs","loading","console","log","catch","error","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2UAoCeA,E,YAjCb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAMRC,aAAe,SAAAC,GACbA,EAAEC,iBACF,EAAKH,MAAMI,SAAS,EAAKC,MAAMC,YAC/BJ,EAAEK,cAAcC,SAVC,EAanBC,aAAe,SAAAP,GACb,EAAKQ,SAAS,CAAEJ,WAAYJ,EAAES,OAAOC,SAZrC,EAAKP,MAAQ,CACXC,WAAY,IAHG,E,sEAkBjB,OACE,0BAAMO,SAAUC,KAAKb,cACnB,2BACEc,KAAK,OACLC,YAAY,YACZC,SAAUH,KAAKL,eAEjB,4BAAQM,KAAK,SAASG,UAAU,iBAC9B,uBAAGA,UAAU,6BAAb,gB,GA3BeC,aCkBVC,MAlBf,SAAapB,GACX,OACE,yBAAKkB,UAAU,cACb,uBAAGG,KAAMrB,EAAMsB,MACb,yBAAKJ,UAAU,YAAYK,IAAKvB,EAAMuB,IAAKC,IAAI,kBAEjD,4BACE,4BACE,uBAAGH,KAAMrB,EAAMyB,MAAOzB,EAAM0B,OAE9B,4BACE,uBAAGL,KAAMrB,EAAMsB,MAAf,uBCFKK,MATf,SAAkB3B,GAChB,OACE,wBAAIkB,UAAU,WACZ,uBAAGA,UAAU,2BAAb,+BACA,8DCmBSU,MArBf,SAAmB5B,GACjB,IACI6B,EADEC,EAAU9B,EAAM+B,KAiBtB,OAdEF,EADEC,EAAQE,OAAS,EACVF,EACNG,OAAO,SAAAC,GAAG,OAAIA,EAAIC,MAAQD,EAAIE,SAC9BC,IAAI,SAAAH,GAAG,OACN,kBAAC,EAAD,CACEX,IAAKW,EAAII,KAAKC,MACdd,KAAMS,EAAIT,KAAKe,MAAMC,KACrBf,KAAMQ,EAAIT,KAAKC,KACfJ,KAAMY,EAAIM,MAAMC,KAChBC,IAAKR,EAAIS,OAIN,kBAAC,EAAD,MAEJ,yBAAKzB,UAAU,YAAYW,ICgCrBe,E,YA/Cb,aAAe,IAAD,8BACZ,+CAWFC,cAAgB,WAAuB,IAAtBC,EAAqB,uDAAb,SACjBC,EACJ,mEACFC,IACGC,IADH,0EAEuEH,EAFvE,sBAE0FC,IAEvFG,KAAK,SAAAnB,GACJ,EAAKrB,SAAS,CAAEyC,KAAMpB,EAAKA,KAAKD,QAASsB,SAAS,IAClDC,QAAQC,IAAIvB,EAAKA,QAElBwB,MAAM,SAAAC,GAAK,OAAIH,QAAQC,IAAI,yBAA2BE,MArBzD,EAAKnD,MAAQ,CACX8C,KAAM,GACNC,SAAS,GAJC,E,iFASZtC,KAAK+B,kB,+BAkBL,OACE,kBAAC,WAAD,KACE,gCACE,yBAAK3B,UAAU,gBACb,wBAAIA,UAAU,cAAd,uBACA,kBAAC,EAAD,CAAYd,SAAUU,KAAK+B,kBAG/B,yBAAK3B,UAAU,gBACZJ,KAAKT,MAAM+C,QACV,sCAEA,kBAAC,EAAD,CAAWrB,KAAMjB,KAAKT,MAAM8C,a,GAxCtBhC,aCMEsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,KAAK,SAAAmB,GACjCA,EAAaC,iB","file":"static/js/main.ecaea040.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass SearchForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchTerm: \"\"\n    };\n  }\n\n  submitSearch = e => {\n    e.preventDefault();\n    this.props.onSearch(this.state.searchTerm);\n    e.currentTarget.reset();\n  };\n\n  handleChange = e => {\n    this.setState({ searchTerm: e.target.value });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.submitSearch}>\n        <input\n          type=\"text\"\n          placeholder=\"Search...\"\n          onChange={this.handleChange}\n        />\n        <button type=\"submit\" className=\"search-button\">\n          <i className=\"material-icons icn-search\">search</i>\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default SearchForm;\n","import React from \"react\";\n\nfunction Img(props) {\n  return (\n    <div className=\"image-card\">\n      <a href={props.link}>\n        <img className=\"idv-image\" src={props.src} alt=\"upsplash pic\" />\n      </a>\n      <ul>\n        <li>\n          <a href={props.user}>{props.name}</a>\n        </li>\n        <li>\n          <a href={props.link}>See on Upsplash</a>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default Img;\n","import React from \"react\";\n\nfunction NoImages(props) {\n  return (\n    <li className=\"no-imgs\">\n      <i className=\"material-icons icon-img\">sentiment_very_dissatisfied</i>\n      <h3>No Images match your search.</h3>\n    </li>\n  );\n}\n\nexport default NoImages;\n","import React from \"react\";\nimport Img from \"./Img\";\nimport NoImages from \"./NoImages\";\n\nfunction ImageList(props) {\n  const results = props.data;\n  let images;\n  if (results.length > 0) {\n    images = results\n      .filter(img => img.width > img.height)\n      .map(img => (\n        <Img\n          src={img.urls.small}\n          user={img.user.links.html}\n          name={img.user.name}\n          link={img.links.html}\n          key={img.id}\n        />\n      ));\n  } else {\n    images = <NoImages />;\n  }\n  return <div className=\"img-list\">{images}</div>;\n}\n\nexport default ImageList;\n","import React, { Component, Fragment } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport SearchForm from \"./components/SearchForm\";\nimport ImageList from \"./components/ImageList\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      imgs: [],\n      loading: true\n    };\n  }\n\n  componentDidMount() {\n    this.performSearch();\n  }\n\n  performSearch = (input = \"sunset\") => {\n    const APP_ID =\n      \"698e2d60078ba0729212c88191a89e2362e4fa16f3254b182ecdf2b9d39e37d0\";\n    axios\n      .get(\n        `https://api.unsplash.com/search/photos?page=1&per_page=20&query=${input}&client_id=${APP_ID}`\n      )\n      .then(data => {\n        this.setState({ imgs: data.data.results, loading: false });\n        console.log(data.data);\n      })\n      .catch(error => console.log(\"Something went wrong: \" + error));\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <header>\n          <div className=\"inner-header\">\n            <h2 className=\"main-title\">Search Unsplash API</h2>\n            <SearchForm onSearch={this.performSearch} />\n          </div>\n        </header>\n        <div className=\"main-content\">\n          {this.state.loading ? (\n            <p>loading</p>\n          ) : (\n            <ImageList data={this.state.imgs} />\n          )}\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}